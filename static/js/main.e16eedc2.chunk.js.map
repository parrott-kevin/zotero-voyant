{"version":3,"sources":["components/input/viewModel.ts","components/input/index.tsx","components/output/index.tsx","App.tsx","index.tsx"],"names":["InputViewModel","value","parseStringPromise","xmlParsed","result","JSON","parse","stringify","corpus","xml","records","record","forEach","title","titles","reduce","item","concat","join","content","keywords","words","keyword","push","sanitize","replace","notes","sanitized","style","styleContents","i","_","Input","setOutput","useState","setValue","vm","viewModel","handleSubmit","event","a","preventDefault","process","data","onSubmit","Grid","container","spacing","xs","TextField","label","multiline","rows","variant","fullWidth","onChange","handleChange","target","Button","type","color","Output","App","output","Box","pb","Typography","key","def","map","index","sm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e16eedc2.chunk.js","sourcesContent":["import { parseStringPromise } from 'xml2js';\n\ninterface Record {\n  titles: Title[];\n  keywords?: Keyword[];\n  'research-notes'?: (string | Style)[];\n}\n\ninterface Title {\n  title: string[];\n}\n\ninterface Keyword {\n  keyword: string[];\n}\n\ninterface Style {\n  style: { _: string }[];\n}\n\n// https://voyant-tools.org/docs/#!/guide/corpuscreator-section-json\ninterface Corpus {\n  title: string;\n  content: string;\n  author?: string;\n  publicationDate?: string;\n  publisher?: string;\n  location?: string;\n  // keywords?: string;\n  collection?: string;\n}\n\nexport default class InputViewModel {\n  async process(value: string): Promise<Corpus[]> {\n    const xmlParsed = await parseStringPromise(value);\n    const result = JSON.parse(JSON.stringify(xmlParsed));\n\n    const corpus: Corpus[] = [];\n    result.xml.records[0].record.forEach((record: Record) => {\n      const title = record.titles.reduce((result: string, item) => {\n        return result.concat(item.title.join(' '), ' ');\n      }, '');\n\n      const content = [];\n      if (record.keywords) {\n        const words = record.keywords.reduce((result: string, item) => {\n          return result.concat(item.keyword.join(' '), ' ');\n        }, '');\n        content.push(words);\n      }\n\n      if (record['research-notes']) {\n        const sanitize = (item: string): string =>\n          item.replace(/\\r?\\n|\\r/g, ' ');\n\n        const notes = record['research-notes'].reduce(\n          (result: string, item) => {\n            if (typeof item === 'string') {\n              const sanitized = sanitize(item);\n              return result.concat(sanitized, ' ');\n            } else if (item.style) {\n              const styleContents = item.style.reduce((result: string, i) => {\n                if (i._) {\n                  const sanitized = sanitize(i._);\n                  return result.concat(sanitized, ' ');\n                } else {\n                  return result;\n                }\n              }, '');\n              return result.concat(styleContents, ' ');\n            } else {\n              return result;\n            }\n          },\n          ''\n        );\n        content.push(notes);\n      }\n\n      corpus.push({\n        title,\n        content: content.join(' '),\n      });\n    });\n\n    return corpus;\n  }\n}\n","import Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport React, { useState } from 'react';\n\nimport viewModel from './viewModel';\n\ninterface Props {\n  setOutput: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst Input: React.FC<Props> = ({ setOutput }) => {\n  const [value, setValue] = useState('');\n\n  const vm = new viewModel();\n\n  const handleChange = (value: string): void => {\n    setValue(value);\n  };\n\n  const handleSubmit = async (\n    event: React.FormEvent<HTMLFormElement>\n  ): Promise<void> => {\n    event.preventDefault();\n    const corpus = await vm.process(value);\n    // output multiple files\n    setOutput(JSON.stringify({ data: corpus }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            label=\"input\"\n            multiline\n            rows={10}\n            variant=\"outlined\"\n            fullWidth\n            value={value}\n            onChange={(event): void => handleChange(event.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\nexport default Input;\n","import TextField from '@material-ui/core/TextField';\nimport React from 'react';\ninterface Props {\n  value: string;\n}\nconst Output: React.FC<Props> = ({ value }) => {\n  return (\n    <TextField\n      label=\"output\"\n      multiline\n      rows={10}\n      variant=\"outlined\"\n      fullWidth\n      value={value}\n    />\n  );\n};\n\nexport default Output;\n","import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport React, { useState } from 'react';\n\nimport Input from './components/input';\nimport Output from './components/output';\n\nconst App: React.FC = () => {\n  const [output, setOutput] = useState('');\n\n  const corpus = [\n    {\n      key: 'Content',\n      def: '/content',\n    },\n    {\n      key: 'Title',\n      def: '/title',\n    },\n    {\n      key: 'Author',\n      def: 'N/A',\n    },\n    {\n      key: 'Documents',\n      def: '/data',\n    },\n  ];\n\n  return (\n    <>\n      <Box pb={2}>\n        <Grid container>\n          <Grid item xs={12}>\n            <Typography variant=\"h5\">JSON Pointers</Typography>\n            {corpus.map((item, index) => {\n              return (\n                <Typography key={index} variant=\"body1\">\n                  <strong>{item.key}: </strong> {item.def}\n                </Typography>\n              );\n            })}\n          </Grid>\n        </Grid>\n      </Box>\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6}>\n          <Input setOutput={setOutput} />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Output value={output} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}