{"version":3,"sources":["components/input/viewModel.ts","components/input/index.tsx","App.tsx","index.tsx"],"names":["InputViewModel","file","fields","this","readUploadedFileAsText","fileContents","process","processed","encoded","encodeURIComponent","JSON","stringify","data","result","Error","console","error","message","inputFile","reader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","readAsText","value","parseStringPromise","xmlParsed","parse","corpus","xml","records","record","forEach","title","titles","reduce","item","concat","join","content","keywords","words","keyword","trim","push","refType","refTypes","i","$","name","workType","work","researchNotes","sanitize","replace","notes","sanitized","style","styleContents","_","HiddenInput","styled","display","Input","useState","setData","inputEl","useRef","vm","viewModel","defaultFields","setFields","handleChange","event","target","checked","handleUpload","a","files","Grid","container","direction","spacing","xs","sm","Button","variant","color","href","download","fullWidth","type","onClick","FormControl","component","FormLabel","FormGroup","FormControlLabel","control","Checkbox","onChange","label","ref","id","e","current","click","App","AppBar","position","Toolbar","Box","mr","Typography","mt","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b790e828.chunk.js","sourcesContent":["import { parseStringPromise } from 'xml2js';\n\ninterface Record {\n  titles: Title[];\n  keywords?: Keyword[];\n  'research-notes'?: (string | Style)[];\n  'ref-type'?: RefType[]; // Item Type\n  'work-type'?: string[]; // Website Type\n}\n\ninterface Title {\n  title: string[];\n}\n\ninterface Keyword {\n  keyword: string[];\n}\n\ninterface Style {\n  style: { _: string }[];\n}\n\ninterface RefType {\n  $: { name: string };\n  _: string;\n}\n\n// https://voyant-tools.org/docs/#!/guide/corpuscreator-section-json\ninterface Corpus {\n  title: string;\n  content: string;\n  author?: string;\n  publicationDate?: string;\n  publisher?: string;\n  location?: string;\n  // keywords?: string;\n  collection?: string;\n}\n\nexport interface Fields {\n  keywords: boolean;\n  researchNotes: boolean;\n  refType: boolean;\n  workType: boolean;\n}\n\nexport default class InputViewModel {\n  async handleUpload(file: File, fields: Fields): Promise<string | undefined> {\n    try {\n      const fileContents = await this.readUploadedFileAsText(file);\n      if (typeof fileContents === 'string') {\n        const processed = await this.process(fileContents, fields);\n        const encoded = encodeURIComponent(JSON.stringify({ data: processed }));\n        const result = `data:application/json;charset=utf-8,${encoded}`;\n        return result;\n      } else {\n        throw new Error('Problem parsing input file');\n      }\n    } catch (err) {\n      console.error(err.message);\n      return;\n    }\n  }\n\n  async readUploadedFileAsText(\n    inputFile: Blob\n  ): Promise<string | ArrayBuffer | null> {\n    const reader = new FileReader();\n    return new Promise((resolve, reject) => {\n      reader.onerror = (): void => {\n        reader.abort();\n        reject(new DOMException('Problem parsing input file'));\n      };\n\n      reader.onload = (): void => {\n        resolve(reader.result);\n      };\n      reader.readAsText(inputFile, 'UTF-8');\n    });\n  }\n\n  async process(value: string, fields: Fields): Promise<Corpus[]> {\n    const xmlParsed = await parseStringPromise(value);\n    const result = JSON.parse(JSON.stringify(xmlParsed));\n\n    const corpus: Corpus[] = [];\n    result.xml.records[0].record.forEach((record: Record) => {\n      const title = record.titles.reduce((result: string, item) => {\n        return result.concat(item.title.join(' '), ' ');\n      }, '');\n\n      const content = [];\n      if (fields.keywords && record.keywords) {\n        const words = record.keywords\n          .reduce((result: string, item) => {\n            return result.concat(item.keyword.join(' '), ' ');\n          }, '')\n          .trim();\n        content.push(words);\n      }\n\n      if (fields.refType && record['ref-type']) {\n        const refTypes = record['ref-type']\n          .reduce((result: string, i) => {\n            return result.concat(i.$.name, ' ');\n          }, '')\n          .trim();\n        content.push(refTypes);\n      }\n\n      if (fields.workType && record['work-type']) {\n        const work = record['work-type'].join(' ');\n        content.push(work);\n      }\n\n      if (fields.researchNotes && record['research-notes']) {\n        const sanitize = (item: string): string =>\n          item.replace(/\\r?\\n|\\r/g, ' ');\n\n        const notes = record['research-notes'].reduce(\n          (result: string, item) => {\n            if (typeof item === 'string') {\n              const sanitized = sanitize(item);\n              return result.concat(sanitized, ' ');\n            } else if (item.style) {\n              const styleContents = item.style.reduce((result: string, i) => {\n                if (i._) {\n                  const sanitized = sanitize(i._);\n                  return result.concat(sanitized, ' ');\n                } else {\n                  return result;\n                }\n              }, '');\n              return result.concat(styleContents, ' ');\n            } else {\n              return result;\n            }\n          },\n          ''\n        );\n        content.push(notes);\n      }\n\n      corpus.push({\n        title,\n        content: content.join(' '),\n      });\n    });\n\n    return corpus;\n  }\n}\n","import Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport { styled } from '@material-ui/core/styles';\nimport React, { useRef, useState } from 'react';\n\nimport viewModel, { Fields } from './viewModel';\n\nconst HiddenInput = styled('input')({\n  display: 'none',\n});\n\nconst Input: React.FC = () => {\n  const [data, setData] = useState('');\n  const inputEl = useRef<HTMLInputElement | null>(null);\n\n  const vm = new viewModel();\n\n  const defaultFields: Fields = {\n    keywords: true,\n    researchNotes: false,\n    refType: false,\n    workType: false,\n  };\n\n  const [fields, setFields] = useState({ ...defaultFields });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setFields({ ...fields, [event.target.name]: event.target.checked });\n  };\n\n  const { keywords, researchNotes, refType, workType } = fields;\n\n  const handleClick = (): void => {\n    inputEl.current?.click();\n  };\n\n  const handleUpload = async (\n    event: React.ChangeEvent<HTMLInputElement>\n  ): Promise<void> => {\n    if (event.target.files) {\n      const file = event.target.files[0];\n      const result = await vm.handleUpload(file, fields);\n      if (result) {\n        setData(result);\n      }\n    }\n  };\n\n  const handleReset = (): void => {\n    setData('');\n    setFields({ ...defaultFields });\n  };\n\n  return (\n    <Grid container direction=\"column\" spacing={2}>\n      {!data ? (\n        <>\n          <Grid item xs={12} sm={6}>\n            <FormControl component=\"fieldset\">\n              <FormLabel component=\"legend\">Fields to include</FormLabel>\n              <FormGroup>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={keywords}\n                      onChange={handleChange}\n                      name=\"keywords\"\n                    />\n                  }\n                  label=\"Keywords\"\n                />\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={researchNotes}\n                      onChange={handleChange}\n                      name=\"researchNotes\"\n                    />\n                  }\n                  label=\"Research Notes\"\n                />\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={refType}\n                      onChange={handleChange}\n                      name=\"refType\"\n                    />\n                  }\n                  label=\"Item Type\"\n                />\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={workType}\n                      onChange={handleChange}\n                      name=\"workType\"\n                    />\n                  }\n                  label=\"Website Type\"\n                />\n              </FormGroup>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <HiddenInput\n              ref={inputEl}\n              type=\"file\"\n              id=\"upload\"\n              onChange={(e): void => {\n                handleUpload(e);\n              }}\n            />\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={handleClick}\n              fullWidth\n            >\n              Upload XML file\n            </Button>\n          </Grid>\n        </>\n      ) : (\n        <>\n          <Grid item xs={12} sm={6}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              href={data}\n              download=\"data.json\"\n              fullWidth\n            >\n              Download\n            </Button>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              type=\"button\"\n              onClick={handleReset}\n              fullWidth\n            >\n              Reset\n            </Button>\n          </Grid>\n        </>\n      )}\n    </Grid>\n  );\n};\nexport default Input;\n","import AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TransformIcon from '@material-ui/icons/Transform';\nimport React from 'react';\n\nimport Input from './components/input';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Box mr={1}>\n            <TransformIcon />\n          </Box>\n          <Typography variant=\"h6\">ZoVo</Typography>\n        </Toolbar>\n      </AppBar>\n      <Box mt={1}>\n        <Container>\n          <Grid container>\n            <Grid item xs={12} sm={6}>\n              <Typography variant=\"h6\">Create Corpus</Typography>\n              <Typography variant=\"body1\" component=\"span\">\n                <ol>\n                  <li>Click Upload XML File</li>\n                  <li>Select XML File from Computer</li>\n                  <li>Click Download JSON corpus</li>\n                </ol>\n              </Typography>\n              <Typography variant=\"h6\">\n                Uploading JSON corpus to Voyant\n              </Typography>\n              <Typography variant=\"body1\" component=\"span\">\n                <ol>\n                  <li>Click the Options slide</li>\n                  <li>Click JSON to open relevant fields</li>\n                  <li>\n                    Fill in fields with following information\n                    <ul>\n                      <li>Content: /content</li>\n                      <li>Title: /title</li>\n                      <li>Author: leave blank</li>\n                      <li>Documents: /data</li>\n                    </ul>\n                  </li>\n                  <li>Click Upload</li>\n                  <li>Select JSON corpus saved from ZoVo</li>\n                </ol>\n              </Typography>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Input />\n            </Grid>\n          </Grid>\n        </Container>\n      </Box>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}